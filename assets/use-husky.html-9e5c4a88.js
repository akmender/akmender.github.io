import{_ as a,o as e,c as s,e as n}from"./app-faff4188.js";const i={},t=n(`<h2 id="husky配置" tabindex="-1"><a class="header-anchor" href="#husky配置" aria-hidden="true">#</a> husky配置</h2><h3 id="_1-初始化git仓库" tabindex="-1"><a class="header-anchor" href="#_1-初始化git仓库" aria-hidden="true">#</a> 1.初始化git仓库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-安装husky" tabindex="-1"><a class="header-anchor" href="#_2-安装husky" aria-hidden="true">#</a> 2.安装husky</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> dlx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改-husky目录下的pre-commit文件" tabindex="-1"><a class="header-anchor" href="#修改-husky目录下的pre-commit文件" aria-hidden="true">#</a> 修改.husky目录下的pre-commit文件</h3><h3 id="配置暂存区eslint" tabindex="-1"><a class="header-anchor" href="#配置暂存区eslint" aria-hidden="true">#</a> 配置暂存区Eslint</h3><p>原因：在实际使用中，可能存在别人写的代码存在错误，而使用lint是全量校验，会对自己的开发造成影响。所以需配置只校验自己编写的代码</p><h4 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装" aria-hidden="true">#</a> 1.安装</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm i lint-staged -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-配置package-json" tabindex="-1"><a class="header-anchor" href="#_2-配置package-json" aria-hidden="true">#</a> 2.配置package.json</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint --fix&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">// ...省略...</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改-husky-pre-commit文件" tabindex="-1"><a class="header-anchor" href="#_3-修改-husky-pre-commit文件" aria-hidden="true">#</a> 3.修改.husky/pre-commit文件</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),d=[t];function r(l,c){return e(),s("div",null,d)}const p=a(i,[["render",r],["__file","use-husky.html.vue"]]);export{p as default};
