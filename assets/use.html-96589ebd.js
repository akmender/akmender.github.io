import{_ as e,o as a,c as i,e as d}from"./app-faff4188.js";const t={},n=d(`<h2 id="初始化仓库" tabindex="-1"><a class="header-anchor" href="#初始化仓库" aria-hidden="true">#</a> 初始化仓库</h2><p>在Git Bash Here中输入以下指令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>git init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="文件状态" tabindex="-1"><a class="header-anchor" href="#文件状态" aria-hidden="true">#</a> 文件状态</h2><h3 id="工作区中文件的4种状态" tabindex="-1"><a class="header-anchor" href="#工作区中文件的4种状态" aria-hidden="true">#</a> 工作区中文件的4种状态</h3><ol><li>未修改(Unmodified)</li><li>已修改(Modified)</li><li>已暂存(Staged)</li><li>未跟踪(Untracked)</li></ol><h3 id="检查当前文件所处状态" tabindex="-1"><a class="header-anchor" href="#检查当前文件所处状态" aria-hidden="true">#</a> 检查当前文件所处状态</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>以精简的状态显示状态</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git status -s
git status --short
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跟踪新文件" tabindex="-1"><a class="header-anchor" href="#跟踪新文件" aria-hidden="true">#</a> 跟踪新文件</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>向暂存区添加多个文件</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git add .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="提交更新" tabindex="-1"><a class="header-anchor" href="#提交更新" aria-hidden="true">#</a> 提交更新</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit -m &quot;本次提交文件的描述&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>跳过使用暂存区</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit -a -m &quot;描述信息&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="还原文件" tabindex="-1"><a class="header-anchor" href="#还原文件" aria-hidden="true">#</a> 还原文件</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -- 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="移除暂存区里的文件" tabindex="-1"><a class="header-anchor" href="#移除暂存区里的文件" aria-hidden="true">#</a> 移除暂存区里的文件</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git reset HEAD 要移除的文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="移除文件" tabindex="-1"><a class="header-anchor" href="#移除文件" aria-hidden="true">#</a> 移除文件</h3><ol><li>从Git仓库和工作区中同时移除</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git rm -f 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>只从仓库中移除文件</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git rm --cached 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="忽略文件" tabindex="-1"><a class="header-anchor" href="#忽略文件" aria-hidden="true">#</a> 忽略文件</h3><p>创建一个.gitignore的配置文件，使用指令在Git Bash Here中快速生成：</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>touch .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>规范如下:</p><ol><li>以 # 号开头的是注释</li><li>以 / 结尾的是目录</li><li>以 / 开头防止递归</li><li>以 ! 开头表示取反</li><li>可以使用glob模式进行文件和文件夹的匹配（glob指简化了的正则表达式）</li></ol><h3 id="查看提交历史" tabindex="-1"><a class="header-anchor" href="#查看提交历史" aria-hidden="true">#</a> 查看提交历史</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看最近的提交历史,数字表示条数</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git log -2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="回退到指定版本" tabindex="-1"><a class="header-anchor" href="#回退到指定版本" aria-hidden="true">#</a> 回退到指定版本</h3><h2 id="本地分支操作" tabindex="-1"><a class="header-anchor" href="#本地分支操作" aria-hidden="true">#</a> 本地分支操作</h2><h3 id="查看分支列表" tabindex="-1"><a class="header-anchor" href="#查看分支列表" aria-hidden="true">#</a> 查看分支列表</h3><ul><li>查看当前分支列表</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建新分支" tabindex="-1"><a class="header-anchor" href="#创建新分支" aria-hidden="true">#</a> 创建新分支</h3><p>基于当前分支，创建一个新的分支。命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="分支的快速创建于切换" tabindex="-1"><a class="header-anchor" href="#分支的快速创建于切换" aria-hidden="true">#</a> 分支的快速创建于切换</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout -b 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><ol><li>切换到master分支</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git checkout master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>在master分支上运行<strong>git merge</strong>命令，将login分支的代码合并到master分支</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git merge 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git branch -d 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="遇到冲突时的分支合并" tabindex="-1"><a class="header-anchor" href="#遇到冲突时的分支合并" aria-hidden="true">#</a> 遇到冲突时的分支合并</h3><p>手动修改</p><h2 id="远程分支操作" tabindex="-1"><a class="header-anchor" href="#远程分支操作" aria-hidden="true">#</a> 远程分支操作</h2><h3 id="_1-上传到远程分支" tabindex="-1"><a class="header-anchor" href="#_1-上传到远程分支" aria-hidden="true">#</a> 1. 上传到远程分支</h3><p>-u 表示把本地分支和远程分支进行关联，只在第一次推送的时后需要带 -u 参数。操作如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push -u 远程仓库的别名 本地分支名称:远程分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>案例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push -u origin payment:pay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果希望远程分支与本地分支的名称保持一致，可以简化如下：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push -u origin payment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果远程分支存在本地分支名称，只需git push</p><h3 id="_2-查看远程分支仓库中所有的分支列表" tabindex="-1"><a class="header-anchor" href="#_2-查看远程分支仓库中所有的分支列表" aria-hidden="true">#</a> 2. 查看远程分支仓库中所有的分支列表</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git remote show 远程仓库名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-拉取远程分支的最新代码" tabindex="-1"><a class="header-anchor" href="#_3-拉取远程分支的最新代码" aria-hidden="true">#</a> 3. 拉取远程分支的最新代码</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-删除远程分支" tabindex="-1"><a class="header-anchor" href="#_4-删除远程分支" aria-hidden="true">#</a> 4. 删除远程分支</h3><ul><li>删除远程仓库中，指定名称的远程分支。语法格式： git push 远程仓库名称 --delete 远程分支名称</li><li>例子如下:</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git push origin --delete pay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,73),s=[n];function l(r,c){return a(),i("div",null,s)}const h=e(t,[["render",l],["__file","use.html.vue"]]);export{h as default};
